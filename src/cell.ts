import { Lerp } from './lerp';
import { Color } from './color';

export class NRXCell {
  private _char = '?';
  private _fgc = new Color(255, 0, 255);
  private _bgc = new Color(255, 0, 255);
  private _bga = 0.0;
  private _rot = 0;

  constructor() {}

  /**
   * Sets the background color to a new color generated by lerping the new and old colors by the given proportion.
   * @param  {number} newBgc The incoming background color to apply.
   * @param  {number} proportion Amount to lerp, where 0 = 100% current color, 1 = 100% new color. Valid range [0 ,1].
   * @returns {void}
   */
  public lerpBgc(r: number, g: number, b: number, proportion: number): void {
    if (proportion < 0 || proportion > 1) {
      throw new Error ('Attempted to lerp the background color by a proportion (' + proportion + ') outside the ' +
        'acceptable range [0, 1].');
    }

    this._bgc = Lerp.lerpColor(new Color(r, g, b), this.bgc, proportion);
  }

  /**
   * Sets the foreground (character) color to a new color generated by lerping the new and old colors by the given
   * proportion.
   * @param  {number} newFgc The incoming foreground color to apply.
   * @param  {number} proportion Amount to lerp, where 0 = 100% current color, 1 = 100% new color. Valid range [0 ,1].
   * @returns {void}
   */
  public lerpFgc(r: number, g: number, b: number, proportion: number): void {
    if (proportion < 0 || proportion > 1) {
      throw new Error ('Attempted to lerp the foreground color by a proportion (' + proportion + ') outside the ' +
        'acceptable range [0, 1].');
    }

    this._fgc = Lerp.lerpColor(new Color(r, g, b), this._fgc, proportion);
  }

  // Methods that allow the display characteristics of the cell to be modified.
  public setFgc(r: number, g: number, b: number): void {
    this._fgc.r = r;
    this._fgc.g = g;
    this._fgc.b = b;
  }
  
  public setBgc(r: number, g: number, b: number): void {
    this._bgc.r = r;
    this._bgc.g = g;
    this._bgc.b = b;
  }
  
  public setBga(bga: number): void { this._bga = bga; }
  public setChar(char: string): void { this._char = char; }

  // Rotation is in radians. Zero (or multiples of 2pi) equal no rotation. Positive rotation is counterclockwise.
  public setRot(rot: number): void { this._rot = rot; }

  get fgc(): Color { return this._fgc; }
  get bgc(): Color { return this._bgc; }
  get bga(): number { return this._bga; }
  get char(): string { return this._char; }
  get rot(): number { return this._rot; }
}
