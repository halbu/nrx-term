import { Lerp } from './lerp';
import { Color } from './color';

export class NRXCell {
  private _char = '?';
  private _fgc = new Color(255, 0, 255);
  private _bgc = new Color(255, 0, 255);
  private _rot = 0;

  constructor() {}

  /**
   * Sets the background color to a new color generated by lerping the new and old colors by the given proportion.
   * @param  {number} newBgc The incoming background color to apply.
   * @param  {number} proportion Amount to lerp, where 0 = 100% current color, 1 = 100% new color. Valid range [0 ,1].
   * @returns {void}
   */
  public lerpBgc(r: number, g: number, b: number, proportion: number): void {
    if (proportion < 0 || proportion > 1) {
      throw new Error ('Attempted to lerp the background color by a proportion (' + proportion + ') outside the ' +
        'acceptable range [0, 1].');
    }

    this._bgc = Lerp.lerpColor(new Color(r, g, b), this.bgc, proportion);
  }

  /**
   * Sets the foreground (character) color to a new color generated by lerping the new and old colors by the given
   * proportion.
   * @param  {number} newFgc The incoming foreground color to apply.
   * @param  {number} proportion Amount to lerp, where 0 = 100% current color, 1 = 100% new color. Valid range [0 ,1].
   * @returns {void}
   */
  public lerpFgc(r: number, g: number, b: number, proportion: number): void {
    if (proportion < 0 || proportion > 1) {
      throw new Error ('Attempted to lerp the foreground color by a proportion (' + proportion + ') outside the ' +
        'acceptable range [0, 1].');
    }

    this._fgc = Lerp.lerpColor(new Color(r, g, b), this._fgc, proportion);
  }

  // Methods that allow the display characteristics of the cell to be modified.

  /**
   * Set the foreground color (in other words, the color of the glyph) of this Cell. Color values must be integers
   * between 0 and 255.
   * @param  {number} r
   * @param  {number} g
   * @param  {number} b
   * @returns void
   */
  public setFgc(r: number, g: number, b: number): void {
    if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {
      throw new Error('Color value outside the acceptable range of [0..255] was passed to setFgc method.');
    }

    this._fgc.r = r;
    this._fgc.g = g;
    this._fgc.b = b;
  }
  
  /**
   * Set the background color (in other words, the fill color) of this Cell. Color values must be integers between
   * 0 and 255.
   * @param  {number} r
   * @param  {number} g
   * @param  {number} b
   * @returns void
   */
  public setBgc(r: number, g: number, b: number): void {
    if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {
      throw new Error('Color value outside the acceptable range of [0..255] was passed to setBgc method.');
    }
    
    this._bgc.r = r;
    this._bgc.g = g;
    this._bgc.b = b;
  }
  
  /**
   * Set the display character of this Cell. The string representing the character must naturally be of length 1.
   * @param  {string} char
   * @returns void
   */
  public setChar(char: string): void {
    if (char.length > 1) {
      throw new Error('String of length greater than 1 (' + char + ') passed as cell character.');
    }

    this._char = char;
  }

  /**
   * Set the angle to which the display character of this Cell will be rotated. Rotation must be specified in radians:
   * pi = 180 degrees, zero (or multiples of 2*pi) equal no rotation.
   * @param  {number} rot
   * @returns void
   */
  public setRot(rot: number): void {
    this._rot = rot;
  }

  // Read-only getters for cell display characteristics.
  get fgc(): Color { return this._fgc; }
  get bgc(): Color { return this._bgc; }
  get char(): string { return this._char; }
  get rot(): number { return this._rot; }
}
